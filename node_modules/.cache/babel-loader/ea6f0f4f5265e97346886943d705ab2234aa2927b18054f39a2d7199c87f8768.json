{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst fetch = require('node-fetch'); // Para realizar solicitudes HTTP\n\nclass AdministradordeImagenes {\n  static async crearImagen(idAlojamiento, rutaArchivo) {\n    try {\n      // Realizar la solicitud POST a la API para crear la imagen\n      const response = await fetch('http://localhost:3001/imagen/createImagen', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          idAlojamiento,\n          RutaArchivo: rutaArchivo\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al crear la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al crear la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async obtenerImagenPorId(idImagen) {\n    try {\n      // Realizar la solicitud GET a la API para obtener la imagen por ID\n      const response = await fetch(`http://localhost:3001/imagen/getImagen/${idImagen}`);\n      if (!response.ok) {\n        throw new Error('Error al obtener la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async actualizarImagen(idImagen, idAlojamiento, rutaArchivo) {\n    try {\n      // Realizar la solicitud PUT a la API para actualizar la imagen por ID\n      const response = await fetch(`http://localhost:3001/imagen/updateImagen/${idImagen}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          idAlojamiento,\n          RutaArchivo: rutaArchivo\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al actualizar la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al actualizar la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async eliminarImagen(idImagen) {\n    try {\n      // Realizar la solicitud DELETE a la API para eliminar la imagen por ID\n      const response = await fetch(`http://localhost:3001/imagen/deleteImagen/${idImagen}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Error al eliminar la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al eliminar la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async obtenerTodasLasImagenes() {\n    try {\n      // Realizar la solicitud GET a la API para obtener todas las imágenes\n      const response = await fetch('http://localhost:3001/imagen/getAllImagenes');\n      if (!response.ok) {\n        throw new Error('Error al obtener todas las imágenes');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener todas las imágenes:', error.message);\n      throw error;\n    }\n  }\n  static async guardarImagenEnCarpeta(rutaArchivo, imagenBuffer) {\n    const carpetaImagenes = path.join(__dirname, 'imagenes');\n\n    // Verificar si la carpeta 'imagenes' existe, si no existe, crearla\n    if (!fs.existsSync(carpetaImagenes)) {\n      fs.mkdirSync(carpetaImagenes);\n    }\n    const rutaCompleta = path.join(carpetaImagenes, rutaArchivo);\n    try {\n      // Escribir el buffer de la imagen en el archivo\n      fs.writeFileSync(rutaCompleta, imagenBuffer);\n      console.log(`Imagen guardada en ${rutaCompleta}`);\n      return rutaCompleta;\n    } catch (error) {\n      console.error('Error al guardar la imagen:', error.message);\n      throw error;\n    }\n  }\n}\nmodule.exports = AdministradordeImagenes;","map":{"version":3,"names":["fs","require","path","fetch","AdministradordeImagenes","crearImagen","idAlojamiento","rutaArchivo","response","method","headers","body","JSON","stringify","RutaArchivo","ok","Error","data","json","error","console","message","obtenerImagenPorId","idImagen","actualizarImagen","eliminarImagen","obtenerTodasLasImagenes","guardarImagenEnCarpeta","imagenBuffer","carpetaImagenes","join","__dirname","existsSync","mkdirSync","rutaCompleta","writeFileSync","log","module","exports"],"sources":["C:/Users/grego/Desktop/desarrollo-web/src/components/AdministradordeImagenes.js"],"sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\nconst fetch = require('node-fetch'); // Para realizar solicitudes HTTP\r\n\r\nclass AdministradordeImagenes {\r\n  static async crearImagen(idAlojamiento, rutaArchivo) {\r\n    try {\r\n      // Realizar la solicitud POST a la API para crear la imagen\r\n      const response = await fetch('http://localhost:3001/imagen/createImagen', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          idAlojamiento,\r\n          RutaArchivo: rutaArchivo,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al crear la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al crear la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async obtenerImagenPorId(idImagen) {\r\n    try {\r\n      // Realizar la solicitud GET a la API para obtener la imagen por ID\r\n      const response = await fetch(`http://localhost:3001/imagen/getImagen/${idImagen}`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async actualizarImagen(idImagen, idAlojamiento, rutaArchivo) {\r\n    try {\r\n      // Realizar la solicitud PUT a la API para actualizar la imagen por ID\r\n      const response = await fetch(`http://localhost:3001/imagen/updateImagen/${idImagen}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          idAlojamiento,\r\n          RutaArchivo: rutaArchivo,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al actualizar la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al actualizar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async eliminarImagen(idImagen) {\r\n    try {\r\n      // Realizar la solicitud DELETE a la API para eliminar la imagen por ID\r\n      const response = await fetch(`http://localhost:3001/imagen/deleteImagen/${idImagen}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al eliminar la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al eliminar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async obtenerTodasLasImagenes() {\r\n    try {\r\n      // Realizar la solicitud GET a la API para obtener todas las imágenes\r\n      const response = await fetch('http://localhost:3001/imagen/getAllImagenes');\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener todas las imágenes');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener todas las imágenes:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async guardarImagenEnCarpeta(rutaArchivo, imagenBuffer) {\r\n    const carpetaImagenes = path.join(__dirname, 'imagenes');\r\n\r\n    // Verificar si la carpeta 'imagenes' existe, si no existe, crearla\r\n    if (!fs.existsSync(carpetaImagenes)) {\r\n      fs.mkdirSync(carpetaImagenes);\r\n    }\r\n\r\n    const rutaCompleta = path.join(carpetaImagenes, rutaArchivo);\r\n\r\n    try {\r\n      // Escribir el buffer de la imagen en el archivo\r\n      fs.writeFileSync(rutaCompleta, imagenBuffer);\r\n      console.log(`Imagen guardada en ${rutaCompleta}`);\r\n      return rutaCompleta;\r\n    } catch (error) {\r\n      console.error('Error al guardar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AdministradordeImagenes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}