{"ast":null,"code":"import fetch from 'node-fetch';\nclass AdministradordeImagenes {\n  static async crearImagen(idAlojamiento, rutaArchivo) {\n    try {\n      const response = await fetch('http://localhost:3001/imagen/createImagen', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          idAlojamiento,\n          RutaArchivo: rutaArchivo\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al crear la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al crear la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async obtenerImagenPorId(idImagen) {\n    try {\n      const response = await fetch(`http://localhost:3001/imagen/getImagen/${idImagen}`);\n      if (!response.ok) {\n        throw new Error('Error al obtener la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async actualizarImagen(idImagen, idAlojamiento, rutaArchivo) {\n    try {\n      const response = await fetch(`http://localhost:3001/imagen/updateImagen/${idImagen}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          idAlojamiento,\n          RutaArchivo: rutaArchivo\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al actualizar la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al actualizar la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async eliminarImagen(idImagen) {\n    try {\n      const response = await fetch(`http://localhost:3001/imagen/deleteImagen/${idImagen}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Error al eliminar la imagen');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al eliminar la imagen:', error.message);\n      throw error;\n    }\n  }\n  static async obtenerTodasLasImagenes() {\n    try {\n      const response = await fetch('http://localhost:3001/imagen/getAllImagenes');\n      if (!response.ok) {\n        throw new Error('Error al obtener todas las imágenes');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error al obtener todas las imágenes:', error.message);\n      throw error;\n    }\n  }\n  static async guardarImagenEnCarpeta(rutaArchivo, imagenBlob) {\n    const carpetaImagenes = 'imagenes'; // Ruta relativa donde guardarás las imágenes\n\n    // Si la carpeta no existe, se crea\n    if (!window.fs || !window.fs.existsSync(carpetaImagenes)) {\n      window.fs.mkdirSync(carpetaImagenes);\n    }\n    const rutaCompleta = `${carpetaImagenes}/${rutaArchivo}`;\n    try {\n      // Convierte el blob en una URL de objeto\n      const blobUrl = window.URL.createObjectURL(imagenBlob);\n\n      // Crea un elemento a para descargar el archivo\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = blobUrl;\n      a.download = rutaArchivo;\n      document.body.appendChild(a);\n      a.click();\n\n      // Libera el objeto URL\n      window.URL.revokeObjectURL(blobUrl);\n      console.log(`Imagen guardada en ${rutaCompleta}`);\n      return rutaCompleta;\n    } catch (error) {\n      console.error('Error al guardar la imagen:', error.message);\n      throw error;\n    }\n  }\n}\nexport default AdministradordeImagenes;","map":{"version":3,"names":["fetch","AdministradordeImagenes","crearImagen","idAlojamiento","rutaArchivo","response","method","headers","body","JSON","stringify","RutaArchivo","ok","Error","data","json","error","console","message","obtenerImagenPorId","idImagen","actualizarImagen","eliminarImagen","obtenerTodasLasImagenes","guardarImagenEnCarpeta","imagenBlob","carpetaImagenes","window","fs","existsSync","mkdirSync","rutaCompleta","blobUrl","URL","createObjectURL","a","document","createElement","style","display","href","download","appendChild","click","revokeObjectURL","log"],"sources":["C:/Users/grego/Desktop/desarrollo-web/src/components/AdministradordeImagenes.js"],"sourcesContent":["import fetch from 'node-fetch';\r\n\r\nclass AdministradordeImagenes {\r\n  static async crearImagen(idAlojamiento, rutaArchivo) {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/imagen/createImagen', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          idAlojamiento,\r\n          RutaArchivo: rutaArchivo,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al crear la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al crear la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async obtenerImagenPorId(idImagen) {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/imagen/getImagen/${idImagen}`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async actualizarImagen(idImagen, idAlojamiento, rutaArchivo) {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/imagen/updateImagen/${idImagen}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          idAlojamiento,\r\n          RutaArchivo: rutaArchivo,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al actualizar la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al actualizar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async eliminarImagen(idImagen) {\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/imagen/deleteImagen/${idImagen}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al eliminar la imagen');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al eliminar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async obtenerTodasLasImagenes() {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/imagen/getAllImagenes');\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener todas las imágenes');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error al obtener todas las imágenes:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async guardarImagenEnCarpeta(rutaArchivo, imagenBlob) {\r\n    const carpetaImagenes = 'imagenes'; // Ruta relativa donde guardarás las imágenes\r\n\r\n    // Si la carpeta no existe, se crea\r\n    if (!window.fs || !window.fs.existsSync(carpetaImagenes)) {\r\n      window.fs.mkdirSync(carpetaImagenes);\r\n    }\r\n\r\n    const rutaCompleta = `${carpetaImagenes}/${rutaArchivo}`;\r\n\r\n    try {\r\n      // Convierte el blob en una URL de objeto\r\n      const blobUrl = window.URL.createObjectURL(imagenBlob);\r\n\r\n      // Crea un elemento a para descargar el archivo\r\n      const a = document.createElement('a');\r\n      a.style.display = 'none';\r\n      a.href = blobUrl;\r\n      a.download = rutaArchivo;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n\r\n      // Libera el objeto URL\r\n      window.URL.revokeObjectURL(blobUrl);\r\n\r\n      console.log(`Imagen guardada en ${rutaCompleta}`);\r\n      return rutaCompleta;\r\n    } catch (error) {\r\n      console.error('Error al guardar la imagen:', error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdministradordeImagenes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}